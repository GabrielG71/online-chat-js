// lib/sse-manager.ts
type SSEController = ReadableStreamDefaultController<Uint8Array>;

interface Connection {
  controller: SSEController;
  userId: string;
  connectedAt: number;
}

// Armazenar conex√µes ativas com mais informa√ß√µes
const connections = new Map<string, Connection>();

// Fun√ß√£o para gerar chave de conex√£o consistente
function generateConnectionKey(userId1: string, userId2: string): string {
  // Sempre colocar o menor ID primeiro para consist√™ncia
  return userId1 < userId2 ? `${userId1}-${userId2}` : `${userId2}-${userId1}`;
}

// Fun√ß√£o para obter todas as chaves de conex√£o para um usu√°rio
function getConnectionKeysForUser(userId: string): string[] {
  const keys: string[] = [];
  connections.forEach((_, key) => {
    if (key.includes(userId)) {
      keys.push(key);
    }
  });
  return keys;
}

export function addConnection(
  connectionKey: string,
  controller: SSEController
) {
  // Extrair userId da chave de conex√£o
  const userId = connectionKey.replace("user-", "");

  // Remover conex√£o antiga do mesmo usu√°rio
  if (connections.has(connectionKey)) {
    const oldConnection = connections.get(connectionKey);
    if (oldConnection) {
      try {
        oldConnection.controller.close();
        console.log(`üîÑ [CONN] Conex√£o antiga fechada: ${connectionKey}`);
      } catch (error) {
        console.log(
          `‚ö†Ô∏è [CONN] Erro ao fechar conex√£o antiga: ${connectionKey}`
        );
      }
    }
  }

  // Adicionar nova conex√£o
  connections.set(connectionKey, {
    controller,
    userId,
    connectedAt: Date.now(),
  });

  console.log(
    `‚úÖ [CONN] Adicionada: ${connectionKey} (User: ${userId}). Total: ${connections.size}`
  );
}

export function removeConnection(connectionKey: string) {
  const connection = connections.get(connectionKey);
  if (connection) {
    try {
      connection.controller.close();
    } catch (error) {
      // Ignore errors when closing
    }
  }

  connections.delete(connectionKey);
  console.log(
    `‚ùå Conex√£o removida: ${connectionKey}. Total: ${connections.size}`
  );
}

export function broadcastMessage(
  senderId: string,
  receiverId: string,
  message: any
) {
  console.log(`üì§ [BROADCAST] Mensagem de ${senderId} para ${receiverId}`);

  // Enviar para conex√µes globais dos usu√°rios envolvidos
  const targetConnections = [
    `user-${senderId}`, // Para quem enviou (confirma√ß√£o)
    `user-${receiverId}`, // Para quem vai receber
  ];

  console.log(
    `üîç [BROADCAST] Procurando conex√µes: ${targetConnections.join(", ")}`
  );
  console.log(
    `üîç [BROADCAST] Conex√µes ativas: ${Array.from(connections.keys()).join(
      ", "
    )}`
  );

  let messagesSent = 0;
  targetConnections.forEach((connectionKey) => {
    const connection = connections.get(connectionKey);
    if (connection) {
      try {
        const data = JSON.stringify({
          type: "new_message",
          message: message,
        });

        connection.controller.enqueue(
          new TextEncoder().encode(`data: ${data}\n\n`)
        );

        messagesSent++;
        console.log(
          `‚úÖ [BROADCAST] Mensagem enviada via SSE para: ${connectionKey}`
        );
      } catch (error) {
        console.error(
          `‚ùå [BROADCAST] Erro ao enviar para ${connectionKey}:`,
          error
        );
        connections.delete(connectionKey);
      }
    } else {
      console.log(`‚ö†Ô∏è [BROADCAST] Conex√£o n√£o encontrada: ${connectionKey}`);
    }
  });

  console.log(
    `üìä [BROADCAST] Total de mensagens enviadas: ${messagesSent}/${targetConnections.length}`
  );
}

export function broadcastTypingStatus(
  senderId: string,
  receiverId: string,
  isTyping: boolean
) {
  console.log(
    `‚å®Ô∏è [TYPING] Status de ${senderId} para ${receiverId}: ${isTyping}`
  );

  // Enviar apenas para o receptor
  const targetConnection = `user-${receiverId}`;
  const connection = connections.get(targetConnection);

  if (connection) {
    try {
      const data = JSON.stringify({
        type: "typing_status",
        senderId: senderId,
        isTyping: isTyping,
      });

      connection.controller.enqueue(
        new TextEncoder().encode(`data: ${data}\n\n`)
      );

      console.log(
        `‚úÖ [TYPING] Status enviado via SSE para: ${targetConnection}`
      );
    } catch (error) {
      console.error(
        `‚ùå [TYPING] Erro ao enviar para ${targetConnection}:`,
        error
      );
      connections.delete(targetConnection);
    }
  } else {
    console.log(`‚ö†Ô∏è [TYPING] Conex√£o n√£o encontrada: ${targetConnection}`);
  }
}

// Fun√ß√£o para debug - listar todas as conex√µes ativas
export function listActiveConnections() {
  console.log("üîç Conex√µes ativas:");
  connections.forEach((connection, key) => {
    console.log(
      `  - ${key} (User: ${connection.userId}, Connected: ${new Date(
        connection.connectedAt
      ).toLocaleTimeString()})`
    );
  });
}
